<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Compressor - DropShare</title>
    <script src="https://cdn.jsdelivr.net/npm/@ffmpeg/ffmpeg@0.12.7/dist/umd/ffmpeg.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@ffmpeg/util@0.12.1/dist/umd/index.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #ffffff;
            color: #333;
            line-height: 1.6;
        }

        .header {
            background: white;
            border-bottom: 1px solid #e5e7eb;
            padding: 12px 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 24px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 20px;
            font-weight: bold;
            color: #3367d6;
            text-decoration: none;
        }

        .nav-links {
            display: flex;
            gap: 16px;
        }

        .nav-links a {
            color: #6b7280;
            text-decoration: none;
            font-weight: 500;
            font-size: 14px;
            padding: 6px 12px;
            border-radius: 6px;
            transition: all 0.2s ease;
        }

        .nav-links a:hover {
            color: #3367d6;
            background: #f3f4f6;
        }

        .nav-links a.active {
            color: #3367d6;
            background: #e3f2fd;
            font-weight: 600;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 40px 20px;
        }

        .page-title {
            font-size: 32px;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 8px;
            text-align: center;
        }

        .page-subtitle {
            font-size: 16px;
            color: #6b7280;
            text-align: center;
            margin-bottom: 40px;
        }

        .compressor-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            padding: 30px;
            margin-bottom: 30px;
        }

        .upload-area {
            border: 3px dashed #d1d5db;
            border-radius: 12px;
            padding: 60px 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #f9fafb;
            margin-bottom: 30px;
        }

        .upload-area:hover,
        .upload-area.dragover {
            border-color: #3367d6;
            background: #eff6ff;
        }

        .upload-icon {
            font-size: 48px;
            margin-bottom: 16px;
            color: #9ca3af;
        }

        .upload-text {
            font-size: 18px;
            color: #374151;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .upload-hint {
            font-size: 14px;
            color: #6b7280;
        }

        #fileInput {
            display: none;
        }

        .compression-controls {
            background: #f9fafb;
            border-radius: 8px;
            padding: 24px;
            margin-bottom: 24px;
            display: none;
        }

        .video-info {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 20px;
        }

        .info-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .info-label {
            font-size: 14px;
            color: #6b7280;
            font-weight: 500;
        }

        .info-value {
            font-size: 14px;
            color: #374151;
            font-weight: 600;
        }

        .control-section {
            margin-bottom: 20px;
        }

        .section-title {
            font-size: 16px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 12px;
        }

        .quality-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 8px;
            margin-bottom: 16px;
        }

        .quality-btn {
            padding: 10px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 6px;
            background: white;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            text-align: center;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .quality-btn:hover {
            border-color: #3367d6;
        }

        .quality-btn.active {
            border-color: #3367d6;
            background: #3367d6;
            color: white;
        }

        .quality-name {
            font-weight: 600;
        }

        .quality-desc {
            font-size: 11px;
            opacity: 0.8;
        }

        .resolution-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 8px;
            margin-bottom: 16px;
        }

        .resolution-btn {
            padding: 8px 12px;
            border: 2px solid #e5e7eb;
            border-radius: 6px;
            background: white;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            text-align: center;
        }

        .resolution-btn:hover {
            border-color: #3367d6;
        }

        .resolution-btn.active {
            border-color: #3367d6;
            background: #3367d6;
            color: white;
        }

        .compress-button {
            background: #3367d6;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            width: 100%;
            margin-top: 20px;
        }

        .compress-button:hover {
            background: #2563eb;
        }

        .compress-button:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }

        .engine-status {
            background: #fef3c7;
            color: #92400e;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-size: 14px;
            display: none;
        }

        .engine-status.loaded {
            background: #d1fae5;
            color: #065f46;
        }

        .progress-section {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #f3f4f6;
            border-radius: 4px;
            overflow: hidden;
            margin: 16px 0;
        }

        .progress-fill {
            height: 100%;
            background: #3367d6;
            border-radius: 4px;
            transition: width 0.3s ease;
            width: 0%;
        }

        .size-comparison {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 16px;
            margin-top: 16px;
            display: none;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
        }

        .size-item {
            text-align: center;
        }

        .size-label {
            font-size: 12px;
            color: #6b7280;
            margin-bottom: 4px;
        }

        .size-value {
            font-size: 16px;
            font-weight: 600;
            color: #374151;
        }

        .video-preview {
            width: 100%;
            max-width: 400px;
            margin: 0 auto 20px;
            border-radius: 8px;
        }
    </style>
    <link rel="stylesheet" href="share-integration.css">
    <link rel="stylesheet" href="device-selector.css">
</head>

<body>
    <!-- Header -->
    <header class="header">
        <div class="header-container">
            <a href="index.html" class="logo">
                üé¨ DropShare
            </a>
            <nav class="nav-links">
                <a href="index.html">Home</a>
                <a href="share.html">Transfer</a>
                <a href="share.html#rooms">Rooms</a>
                <a href="image-tools.html">Images</a>
                <a href="audio-tools.html">Audio</a>
                <a href="video-tools.html" class="active">Video</a>
                <a href="document-tools.html">Files</a>
            </nav>
        </div>
    </header>

    <div class="container">
        <!-- Top-left return button -->
        
        <h1 class="page-title">Video Compressor</h1>
        <p class="page-subtitle">Reduce video file size while maintaining quality - Real FFmpeg Processing</p>
        
        <div class="compressor-card">
            <div class="engine-status" id="engineStatus">
                Loading video processing engine...
            </div>

            <div class="upload-area" id="uploadArea">
                <div class="upload-icon">üóúÔ∏è</div>
                <div class="upload-text">Click or drag to upload video file</div>
                <div class="upload-hint">Supports MP4, AVI, MOV, MKV, WebM formats</div>
                <input type="file" id="fileInput" accept="video/*">
            </div>
            
            <div class="compression-controls" id="compressionControls">
                <video class="video-preview" id="videoPreview" controls></video>

                <div class="video-info">
                    <div class="info-row">
                        <span class="info-label">Original Format</span>
                        <span class="info-value" id="originalFormat">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">File Size</span>
                        <span class="info-value" id="originalSize">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Duration</span>
                        <span class="info-value" id="videoDuration">-</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Resolution</span>
                        <span class="info-value" id="videoResolution">-</span>
                    </div>
                </div>

                <div class="control-section">
                    <div class="section-title">Compression Quality</div>
                    <div class="quality-options">
                        <div class="quality-btn" data-crf="18">
                            <div class="quality-name">Excellent</div>
                            <div class="quality-desc">Large file</div>
                        </div>
                        <div class="quality-btn active" data-crf="23">
                            <div class="quality-name">High</div>
                            <div class="quality-desc">Balanced</div>
                        </div>
                        <div class="quality-btn" data-crf="28">
                            <div class="quality-name">Medium</div>
                            <div class="quality-desc">Good compression</div>
                        </div>
                        <div class="quality-btn" data-crf="35">
                            <div class="quality-name">Low</div>
                            <div class="quality-desc">Small file</div>
                        </div>
                    </div>
                </div>

                <div class="control-section">
                    <div class="section-title">Output Resolution</div>
                    <div class="resolution-options">
                        <div class="resolution-btn active" data-resolution="original">Original</div>
                        <div class="resolution-btn" data-resolution="1080p">1080p</div>
                        <div class="resolution-btn" data-resolution="720p">720p</div>
                        <div class="resolution-btn" data-resolution="480p">480p</div>
                    </div>
                </div>

                <div class="size-comparison" id="sizeComparison">
                    <div class="size-item">
                        <div class="size-label">Original Size</div>
                        <div class="size-value" id="originalSizeDisplay">-</div>
                    </div>
                    <div class="size-item">
                        <div class="size-label">Estimated Size</div>
                        <div class="size-value" id="estimatedSize">-</div>
                    </div>
                </div>
                
                <button class="compress-button" id="compressBtn" disabled>Loading Engine...</button>
            </div>

            <div class="progress-section" id="progressSection">
                <div id="progressText">Preparing compression...</div>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const { FFmpeg } = FFmpegWASM;
        let ffmpeg = null;
        let videoFile = null;
        let isEngineLoaded = false;
        let videoDuration = 0;
        let videoWidth = 0;
        let videoHeight = 0;
        
        // Initialize FFmpeg when page loads
        async function initFFmpeg() {
            const statusEl = document.getElementById('engineStatus');
            statusEl.style.display = 'block';
            statusEl.textContent = 'Loading video processing engine (this may take a moment)...';

            try {
                const { FFmpeg } = FFmpegWASM;
                const { toBlobURL } = FFmpegUtil;
                
                ffmpeg = new FFmpeg();
                
                ffmpeg.on('log', ({ message }) => {
                    console.log(message);
                });
                
                ffmpeg.on('progress', ({ progress }) => {
                    const percentage = Math.round(progress * 100);
                    updateProgress(percentage);
                });
                
                statusEl.textContent = 'Loading FFmpeg core files...';
                
                const baseURL = 'https://unpkg.com/@ffmpeg/core@0.12.6/dist/umd';
                
                await ffmpeg.load({
                    coreURL: await toBlobURL(`${baseURL}/ffmpeg-core.js`, 'text/javascript'),
                    wasmURL: await toBlobURL(`${baseURL}/ffmpeg-core.wasm`, 'application/wasm'),
                });
                
                isEngineLoaded = true;
                statusEl.textContent = '‚úì Video processing engine loaded and ready!';
                statusEl.classList.add('loaded');
                
                // Hide status after 3 seconds
                setTimeout(() => {
                    statusEl.style.display = 'none';
                }, 3000);
                
                // Enable compress button if file is loaded
                if (videoFile) {
                    document.getElementById('compressBtn').disabled = false;
                    document.getElementById('compressBtn').textContent = 'Compress Video';
                }
                
                console.log('FFmpeg loaded successfully');
                
            } catch (error) {
                console.error('Failed to load FFmpeg:', error);
                statusEl.textContent = '‚úó Failed to load video processing engine. Please refresh the page.';
                statusEl.style.background = '#fee2e2';
                statusEl.style.color = '#dc2626';
            }
        }
        
        // Initialize on page load
        window.addEventListener('load', initFFmpeg);
        
        // File upload
        document.getElementById('fileInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file && file.type.startsWith('video/')) {
                videoFile = file;
                const videoUrl = URL.createObjectURL(file);
                const videoPreview = document.getElementById('videoPreview');
                videoPreview.src = videoUrl;
                
                document.getElementById('compressionControls').style.display = 'block';
                
                // Update file info
                const extension = file.name.split('.').pop().toUpperCase();
                document.getElementById('originalFormat').textContent = extension;
                document.getElementById('originalSize').textContent = formatFileSize(file.size);
                document.getElementById('originalSizeDisplay').textContent = formatFileSize(file.size);
                
                // Get video metadata
                videoPreview.addEventListener('loadedmetadata', function() {
                    videoDuration = videoPreview.duration;
                    videoWidth = videoPreview.videoWidth;
                    videoHeight = videoPreview.videoHeight;
                    
                    document.getElementById('videoDuration').textContent = formatTime(videoDuration);
                    document.getElementById('videoResolution').textContent = `${videoWidth}x${videoHeight}`;
                    
                    updateEstimatedSize();
                    document.getElementById('sizeComparison').style.display = 'grid';
                });

                const compressBtn = document.getElementById('compressBtn');
                if (isEngineLoaded) {
                    compressBtn.disabled = false;
                    compressBtn.textContent = 'Compress Video';
                } else {
                    compressBtn.disabled = true;
                    compressBtn.textContent = 'Loading Engine...';
                }
            }
        });
        
        // Quality selection
        document.querySelectorAll('.quality-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.quality-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                updateEstimatedSize();
            });
        });

        // Resolution selection
        document.querySelectorAll('.resolution-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.resolution-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                updateEstimatedSize();
            });
        });

        function updateEstimatedSize() {
            if (!videoFile || !videoDuration) return;
            
            const crf = parseInt(document.querySelector('.quality-btn.active').dataset.crf);
            const resolution = document.querySelector('.resolution-btn.active').dataset.resolution;
            
            // Rough estimation based on CRF and resolution
            let compressionRatio = 1;
            if (crf <= 18) compressionRatio = 0.8;
            else if (crf <= 23) compressionRatio = 0.5;
            else if (crf <= 28) compressionRatio = 0.3;
            else compressionRatio = 0.15;
            
            // Resolution factor
            let resolutionFactor = 1;
            if (resolution === '1080p') resolutionFactor = Math.min(1, (1920 * 1080) / (videoWidth * videoHeight));
            else if (resolution === '720p') resolutionFactor = Math.min(1, (1280 * 720) / (videoWidth * videoHeight));
            else if (resolution === '480p') resolutionFactor = Math.min(1, (640 * 480) / (videoWidth * videoHeight));
            
            const estimatedSize = videoFile.size * compressionRatio * resolutionFactor;
            document.getElementById('estimatedSize').textContent = formatFileSize(estimatedSize);
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${minutes}:${secs.toString().padStart(2, '0')}`;
        }

        function updateProgress(percentage) {
            const progressSection = document.getElementById('progressSection');
            const progressFill = document.getElementById('progressFill');
            const progressText = document.getElementById('progressText');
            
            if (progressSection.style.display === 'none') {
                progressSection.style.display = 'block';
            }
            
            progressFill.style.width = Math.min(percentage, 100) + '%';
            progressText.textContent = `Compressing... ${Math.min(percentage, 100)}%`;
        }
        
        // Compress button with real FFmpeg functionality
        document.getElementById('compressBtn').addEventListener('click', async function() {
            if (!videoFile || !ffmpeg || !isEngineLoaded) return;
            
            const crf = document.querySelector('.quality-btn.active').dataset.crf;
            const resolution = document.querySelector('.resolution-btn.active').dataset.resolution;
            
            // Show progress
            const progressSection = document.getElementById('progressSection');
            progressSection.style.display = 'block';
            this.disabled = true;
            
            try {
                // Write input file to FFmpeg filesystem
                const fileExtension = videoFile.name.split('.').pop().toLowerCase();
                const inputFileName = 'input.' + fileExtension;
                const outputFileName = 'compressed.mp4';
                
                document.getElementById('progressText').textContent = 'Loading video file...';
                await ffmpeg.writeFile(inputFileName, new Uint8Array(await videoFile.arrayBuffer()));
                
                // Build FFmpeg command
                let command = ['-i', inputFileName];
                
                // Video codec and quality
                command.push('-c:v', 'libx264', '-crf', crf);
                
                // Resolution scaling
                if (resolution !== 'original') {
                    const scales = {
                        '1080p': '-1:1080',
                        '720p': '-1:720', 
                        '480p': '-1:480'
                    };
                    command.push('-vf', `scale=${scales[resolution]}`);
                }
                
                // Audio codec
                command.push('-c:a', 'aac', '-b:a', '128k');
                
                // Preset for encoding speed/efficiency balance
                command.push('-preset', 'fast');
                
                command.push('-y', outputFileName);
                
                console.log('FFmpeg compress command:', command.join(' '));
                document.getElementById('progressText').textContent = 'Compressing video...';
                
                // Execute FFmpeg command
                await ffmpeg.exec(command);
                
                // Read the output file
                const outputData = await ffmpeg.readFile(outputFileName);
                
                // Create download link
                const blob = new Blob([outputData.buffer], { type: 'video/mp4' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                const originalName = videoFile.name.replace(/\.[^/.]+$/, '');
                const qualityName = document.querySelector('.quality-btn.active .quality-name').textContent.toLowerCase();
                const resolutionSuffix = resolution === 'original' ? '' : `_${resolution}`;
                a.download = `${originalName}_compressed_${qualityName}${resolutionSuffix}.mp4`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                // Clean up
                try {
                    await ffmpeg.deleteFile(inputFileName);
                    await ffmpeg.deleteFile(outputFileName);
                } catch (e) {
                    console.warn('Cleanup warning:', e);
                }
                
                document.getElementById('progressFill').style.width = '100%';
                const finalSize = formatFileSize(outputData.length);
                const compressionRatio = ((videoFile.size - outputData.length) / videoFile.size * 100).toFixed(1);
                document.getElementById('progressText').textContent = `‚úì Video compressed! ${finalSize} (${compressionRatio}% smaller)`;
                
            } catch (error) {
                console.error('Compression failed:', error);
                document.getElementById('progressText').textContent = 'Compression failed: ' + error.message;
            } finally {
                this.disabled = false;
                this.textContent = 'Compress Video';
            }
        });

        // Drag and drop upload
        const uploadArea = document.getElementById('uploadArea');
        uploadArea.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('dragover');
        });
        
        uploadArea.addEventListener('dragleave', function() {
            this.classList.remove('dragover');
        });
        
        uploadArea.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0 && files[0].type.startsWith('video/')) {
                document.getElementById('fileInput').files = files;
                document.getElementById('fileInput').dispatchEvent(new Event('change'));
            }
        });
        
        uploadArea.addEventListener('click', function() {
            document.getElementById('fileInput').click();
        });
    </script>
    <!-- Share Integration -->
    <script src="device-selector.js"></script>
    <script src="add-share-integration.js"></script>
</body>
</html>